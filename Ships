package backend

abstract class Objects {

    static final int battleship = 3
    static final int submarine = 2
    static final int mine = 1
    static final int num_battleships = 3
    static final int num_submarines = 4
    static final int num_mines = 5

    protected int coord_x, coord_y
    protected int size

    Board board = new Board()

    int get_size(){
        return size
    }

    void set_location(){

       board.set(coord_x, coord_y, size)
    }


    void set_size(int ship_size){
        size = ship_size
    }

    void set_x(){
        coord_x = (int) (Math.random() * (Board.size))
    }

    void set_y(){
        coord_y = (int) (Math.random() * (Board.size))
    }

    boolean is_mine(){

        if(get_size() == mine)
            return true

        else
            return false
    }


}

class Mine extends Objects{

    Mine(){
        set_size(mine)
        set_mines()
    }

    void generator(){

        set_x()
        set_y()

        while(board.get(coord_x, coord_y) != 0){
            set_x()
            set_y()
        }

        set_location()
    }

    void set_mines(){

        for(int i = 0; i < num_mines; i++){
            generator()
        }
    }


}

abstract class Ships extends Objects{

    static final int horizontal = 0
    static final int vertical = 1
    protected int direction

    void set_direction() {
        direction = (int) (Math.random() * (2))
    }

    int get_direction(){
        return direction
    }

    int setx_horizontal(){
        coord_x = (int) (Math.random() * (Board.size - size))
    }

    int sety_vertical(){
        coord_y = (int) (Math.random() * (Board.size - size))
    }

    void set_location_vert(){

        for (int i = 0; i < size; i++) {

            board.set(coord_x, coord_y + i, size)
        }
    }


    void set_location_hor(){

        for (int i = 0; i < size; i++) {

            board.set(coord_x + i, coord_y, size)
        }
    }

    boolean possiblePlacementHor() {

        for (int i = 0; i < size; i++) {

            if (board.get(coord_x + i, coord_y) != 0)
                return false
        }

        return true
    }

    boolean possiblePlacementVert() {

        for (int i = 0; i < size; i++) {

            if (board.get(coord_x, coord_y + i) != 0)
                return false
        }

        return true
    }

    void generator(){

        boolean flag = false

        set_direction()

        if(get_direction() == horizontal){

            while(!flag){
                setx_horizontal()
                set_y()

                flag = possiblePlacementHor()
            }

            for (int i = 0; i < size; i++) {

                set_location_hor()
            }


        }

        else if(get_direction() == vertical){

            while(!flag){
                set_x()
                sety_vertical()
                flag = possiblePlacementVert()
            }

            for (int i = 0; i < size; i++) {

                set_location_vert()
            }

        }

    }

}


class Submarine extends Ships{

    Submarine(){
        set_size(submarine)
        set_submarines()
    }


    void set_submarines(){

        for(int i = 0; i < num_submarines; i++){
            generator()
        }
    }

}


class Battleship extends Ships{

    Battleship(){
        set_size(battleship)
        set_battleships()
    }


    void set_battleships(){

        for(int i = 0; i < num_battleships; i++){
            generator()
        }
    }

}



